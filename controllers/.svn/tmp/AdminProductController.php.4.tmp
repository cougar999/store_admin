<?php
class AdminProductController extends AdminController{
		
	public function __construct(){
		$this->template_info = true;
		$this->count = 20;
		parent::__construct();
	}
	
	public function initAction() {
		$pageno = intval(getValue('pageno',1));
		$page = Product::getPageList($pageno);
		$this->assign('page', $page);
		$this->view('product/index.html');
	}
	
	public function addAction() {
		if(!isSubmit('isProductSubmit')){
			$this->view('product/add.html');
		} else {
			
			$name = trim(getValue('name'));
			$stock = trim(getValue('stock'));
			$title = trim(getValue('title'));
			$description = trim(getValue('description'));
			$pack_list = trim(getValue('pack_list'));
			$status = intval(getValue('status'));
			$service = trim(getValue('service'));
			$channel_code = trim(getValue('channel_code'));
			$products_spec = trim(getValue('products_spec'));
			$original_price = intval(getValue('original_price'));
			$original_price_name = trim(getValue('original_price_name'));
			$use_price = intval(getValue('use_price'));
			$use_price_name = trim(getValue('use_price_name'));
			$dicount_price = intval(getValue('dicount_price'));
			$discount_price_name = trim(getValue('discount_price_name'));
			$last_updater = trim(getValue('last_updater'));
			
			$category_id = intval(getValue('category_id'));
			$category_type = trim(getValue('category_type', 0));
			$product_order = trim(getValue('product_order', 0));
			
			$arr_input = array();
			$arr_input['name'] = $name;
			$arr_input['stock'] = $stock;
			$arr_input['title'] = $title;
			$arr_input['description'] = $description;
			$arr_input['pack_list'] = $pack_list;
			$arr_input['status'] = $status;
			$arr_input['service'] = $service;
			$arr_input['channel_code'] = $channel_code;
			$arr_input['product_spec'] = $product_spec;
			$arr_input['original_price'] = $original_price;
			$arr_input['original_price_name'] = $original_price_name;
			$arr_input['use_price'] = $use_price;
			$arr_input['use_price_name'] = $use_price_name;
			$arr_input['dicount_price'] = $dicount_price;
			$arr_input['discount_price_name'] = $discount_price_name;
			$arr_input['last_updater'] = $last_updater;
			$arr_input['default_image'] = $default_image;
			$arr_input['category_id'] = $category_id;
			$arr_input['category_type'] = $category_type;
			$arr_input['product_order'] = $product_order;
			$arr_input['locate_type'] = trim(getValue('locate_type', 1));
			
			if(!empty($_FILES['default_image']['name'])) {
				$obj_img = new Image();
				$arr_input['url'] = $obj_img->uploadFile($_FILES['default_image']); 
			}
			
			$obj_product = new Product();
			
			//$image = $obj_product->addImage($arr_input);
			//echo $arr_input['default_image'];
			
			
			$result = $obj_product->addProduct($arr_input);
			if($result) {
				header("Location:/product");
			}
		}
		
	}
	
	public function modifyAction () {
		if(!isSubmit('isProductSubmit')){
			
			$product_id = trim(getValue('id'));
			$this->assign('page', Product::viewProduct($product_id));
			$this->assign('cate', Product::getProductCate($product_id));
			$this->assign('attrvalue', Product::getProductAttrValue($product_id));
			$this->assign('cross', Product::getProductCross($this->get('attrvalue'), Product::getProductAttrCross($product_id)));
			$this->assign('images', Product::getImageAllListByProductId($product_id));
			
			$this->view('product/edit.html');
			
		} else {
			
			$arr_input = array();
			$arr_input['id'] = trim(getValue('id'));
			$arr_input['name'] = trim(getValue('name'));
			$arr_input['stock'] = trim(getValue('stock'));
			$arr_input['title'] = trim(getValue('title'));
			$arr_input['description'] = trim(getValue('description'));
			$arr_input['pack_list'] = trim(getValue('pack_list'));
			$arr_input['status'] = intval(getValue('status'));
			$arr_input['service'] = trim(getValue('service'));
			$arr_input['channel_code'] = trim(getValue('channel_code'));
			$arr_input['product_spec'] = trim(getValue('product_spec'));
			$arr_input['original_price'] = intval(getValue('original_price'));
			$arr_input['original_price_name'] = trim(getValue('original_price_name'));
			$arr_input['use_price'] = intval(getValue('use_price'));
			$arr_input['use_price_name'] = trim(getValue('use_price_name'));
			$arr_input['dicount_price'] = intval(getValue('dicount_price'));
			$arr_input['discount_price_name'] = trim(getValue('discount_price_name'));
			$arr_input['last_updater'] = trim(getValue('last_updater'));
			$arr_input['default_image'] = trim(getValue('default_image'));
			$arr_input['category_id'] = intval(getValue('category_id'));
			$arr_input['category_type'] = trim(getValue('category_type', 0));
			$arr_input['product_order'] = trim(getValue('product_order', 0));
			
			$obj_product = new Product();
			
			$result = $obj_product->modifyProduct($arr_input);
			
			$attrvalids_list = getValue('attribute_value_ids');
			$attrx_product_stock_list = getValue('attrx_product_stock');
			$attrx_product_price_list = getValue('attrx_product_price');
			$attrx_product_desc_list = getValue('attrx_product_desc');
			if ($attrvalids_list) {
				$obj_comb = new Combination();
				foreach ($attrvalids_list as $key => $attrvalid) {
					if ($attrx_product_price_list[$key] || $attrvalids_list[$key] || $attrx_product_desc_list[$key]) {
						$arr_comb = $obj_comb->idsexist($arr_input['id'], $attrvalid);
						if ($arr_comb) {
							$arr_comb['product_stock'] = $attrvalids_list[$key];
							$arr_comb['price'] = $attrx_product_price_list[$key];
							$arr_comb['title'] = $attrx_product_desc_list[$key];
							$result_comb = $obj_comb->modify($arr_comb);
						} else {
							$arr_comb = array();
							$arr_comb['product_id'] = $arr_input['id'];
							$arr_comb['attribute_value_ids'] = $attrvalids_list[$key];
							$arr_comb['product_stock'] = $attrvalids_list[$key];
							$arr_comb['price'] = $attrx_product_price_list[$key];
							$arr_comb['title'] = $attrx_product_desc_list[$key];
							$result_comb = $obj_comb->add($arr_comb);
						}
					}
				}
			}
			
			if($result){
				header("Location:/product?action=modifyAction&id=" . $arr_input['id']);
			}
			
		}
	}
	
	public function UploadimgAjax () {
		$obj_img = new Image();
		$url = $obj_img->uploadFile($_FILES['default_image']);
		
		//添加图片
		$img_input['product_id'] = intval(getValue('product_id'));
		$img_input['type'] = intval(getValue('img_type',1));//必填
		$img_input['locate_type'] = intval(getValue('locate_type',1)); //必填
		$img_input['description'] = trim(getValue('img_desc',1));
		$img_input['order'] = intval(getValue('img_order',0)); //必填
		$img_input['name'] = trim(getValue('img_name'));
		$img_input['url'] = $url;
		
		$image = Product::addImage($img_input);
		
		echo $url;
	}
	
	
	//产品编辑页，弹出属性页面
	public function getCombbyAjax() {
			
		$product_id = intval(getValue('product_id'));
		
		if(!isSubmit('isAttrValueSubmit')){
			
			$attr = Attribute::getAttributeAllList($product_id);
			$product_attr = Combination::getProductAttrValueListByProductId($product_id);
			
			unset($attrid);
			unset($arr_hash_values);
			foreach ($attr as $row){
				$attrid[] = $row['id'];
				$arr_hash_values[$row['id']]['name'] = $row['name'];
			}
			$arr_values = Attribute::getAttriValueList($attrid);
			foreach ($arr_values as $rows){
				foreach ($rows as $row){
					$arr_hash_values[$row['attribute_id']]['attr_values'][$row['id']]['value'] = $row['value'];
					$arr_hash_values[$row['attribute_id']]['attr_values'][$row['id']]['is_exist'] = in_array($row['id'], $product_attr) ? 1 : 0;
				}
			}
			
			$this->assign('attr', $arr_hash_values);
			$this->assign('product_value', $product_attr);
			$this->view('product/comblist.html','layout_block.html');
			
		} else {
			
			$attribute_id_list = getValue('attribute_id');
			$values_list = getValue('attrvalue');
			
			$arr_input = array();
			$arr_input['attr_values'] 	= $values_list;
			$arr_input['product_id'] 	= $product_id;
			
			$result = Combination::addBatch($arr_input);
			
			if($result) {
				echo "<script>parent.$.colorbox.close();</script>";
			}
		}
	}
	
	
	public function getMemorydata(){
		$product_id = intval(getValue("id"));
		$data				 = Product::viewProduct($product_id);
		$data['cate']		 = Product::getProductCate($product_id);
		$data['attrvalue']	 = Product::getProductAttrValue($product_id);
		$data['attrcross']	 = Product::getProductAttrCross($product_id);
		$data['cross']		 = Product::getProductCross($data['attrvalue'] , $data['attrcross']);
		$data['images']		 = Product::getImageAllListByProductId($product_id);
		echo "<pre>";
		print_r(json_encode($data));
		echo "</pre>";
		//$detail = ap_core_post("PRODUCT_UPDATE_CACHE",$data);
	}
}
?>